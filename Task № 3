import math as m
import numpy as np

N = 8
a1 = -1
a2 = 0.1
b = 1.1

def f_I_3a (x):
    return 1 / (1 + x ** 2)

def f_I_3b (x): 
    return x ** (1 / 3) * m.exp(m.sin(x))

def an_f_3a():
    return m.pi/2

def an_f_3b():
    return 1.29587400873171


def trapezoid ():
    S1 = np.zeros(N - 1)
    S2 = np.zeros(N - 1)
    for i in range (2 , N+1):
        dx1 = (b - a1) / (2 ** i)
        dx2 = (b - a2) / (2 ** i)
        x_1_1 = a1
        x_1_2 = a1 + dx1
        x_2_1 = a2
        x_2_2 = a2 + dx2
        for j in range (1 , (2 ** i) + 1):
            S1[i - 2] += (1/2) * (f_I_3a(x_1_1) + f_I_3a(x_1_2)) * (dx1) 
            x_1_1 = x_1_1 + dx1
            x_1_2 =x_1_2 + dx1
            S2[i - 2] += (1/2) * (f_I_3b(x_2_1) + f_I_3b(x_2_2)) * (dx2) 
            x_2_1 = x_2_1 + dx2
            x_2_2 =x_2_2 + dx2
    print ("Result of trapezoid method I_3a:" ,'\n', S1)
    print ("\nResult of trapezoid method I_3b:" ,'\n', S2)
    return S1, S2
       
    
def simpson ():
    S1 = np.zeros(N - 1)
    S2 = np.zeros(N - 1)
    for i in range (2 , N+1):
        dx1 = (b - a1) / (2 ** i)
        dx2 = (b - a2) / (2 ** i)
        x_1_1 = a1
        x_1_2 = a1 + dx1
        x_2_1 = a2
        x_2_2 = a2 + dx2
        for j in range (1 , (2 ** i) + 1):
            S1[i - 2] += (1/6) * (f_I_3a(x_1_1) + f_I_3a(x_1_2) + 4 * f_I_3a((x_1_2 + x_1_1) / 2)) * (dx1) 
            x_1_1 = x_1_1 + dx1
            x_1_2 =x_1_2 + dx1
            S2[i - 2] += (1/6) * (f_I_3b(x_2_1) + f_I_3b(x_2_2) + 4 * f_I_3b((x_2_2 + x_2_1) / 2)) * (dx2)  
            x_2_1 = x_2_1 + dx2
            x_2_2 =x_2_2 + dx2
    print ("Result of Simson method I_3a:" ,'\n', S1)
    print ("\nResult of Simson method I_3b:" ,'\n', S2)
    return S1, S2
    
    
if __name__ == '__main__':
    test_trap_s1, test_trap_s2 = trapezoid ()
    print ('\n')
    test_sim_s1, test_sim_s2 = simpson ()
    rho_s_1 = m.log((test_sim_s1[5] - test_sim_s1[6]) / (test_sim_s1[4] - test_sim_s1[5])) / m.log (1/2)
    rho_t_1 = m.log((test_trap_s1[5] - test_trap_s1[6]) / (test_trap_s1[4] - test_trap_s1[5])) / m.log (1/2)
    rho_s_2 = m.log((test_sim_s2[5] - test_sim_s2[6]) / (test_sim_s2[4] - test_sim_s2[5])) / m.log (1/2)
    rho_t_2 = m.log((test_trap_s2[5] - test_trap_s2[6]) / (test_trap_s2[4] - test_trap_s2[5])) / m.log (1/2)
    print ("rho for Simson s1 = ", rho_s_1)
    print ("rho for Trapezoid s1 = ", rho_t_1)
    print ("rho for Simson s2 = ", rho_s_2)
    print ("rho for Trapezoid s2 = ", rho_t_2)
